# -*- coding: utf-8 -*-
"""#Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cxg9oJ4m1NB6eiAjotkipMaf9k4fdmNl

Predicting the optimum number of clusters and representing it visually

TASK 2

Importing all the required libraries and loading the data
"""

# Commented out IPython magic to ensure Python compatibility.
#Predicting optimum number of clusters and representing it visually using Python
#By JYOTI NAIN
#Importing all the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
# %matplotlib inline
from sklearn import datasets

#Readig the dataset
iris = datasets.load_iris()
df = pd.DataFrame(iris.data, columns = iris.feature_names)
df.drop(['sepal length (cm)', 'sepal width (cm)'], axis=1, inplace=True)
df.head()

"""Finding the number of clusters through elbow method"""

#Finding the number of clusters
k_range = range(1,10)
sse = []
for k in k_range:
    km = KMeans(n_clusters=k)
    km.fit(df[['petal length (cm)','petal width (cm)']])
    sse.append(km.inertia_)
sse  

plt.xlabel('K')
plt.ylabel('sse')
plt.plot(k_range,sse)

"""Shrinking the range"""

#Shrinking the range
scaler = MinMaxScaler()
scaler.fit(df[['petal length (cm)','petal width (cm)']])
df[['petal length (cm)','petal width (cm)']] = scaler.transform(df[['petal length (cm)','petal width (cm)']])
df.head()

"""Using KMeans classifier"""

#Using KMeans Classifier which has already been imported
km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df[['petal length (cm)','petal width (cm)']])
y_predicted

df['cluster'] = y_predicted
df

km.cluster_centers_

"""Visualizing the optimum number of clusters"""

#Visualizing the optimum number of clusters
df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1] 
df3 = df[df.cluster == 2]
plt.scatter(df1['petal length (cm)'],df1['petal width (cm)'],s=50,c='red')
plt.scatter(df2['petal length (cm)'],df2['petal width (cm)'],s=50,c='orange')
plt.scatter(df3['petal length (cm)'],df3['petal width (cm)'],s=50,c='pink')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],s=200,c='black',marker='*')