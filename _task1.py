# -*- coding: utf-8 -*-
"""#task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CaSd7StpZMcofLeYlmvcGOH9tgheSoPK

**Importing all the required libraries and loading the data**
"""

# Commented out IPython magic to ensure Python compatibility.
#Simple Linear Regression using Python
#By JYOTI NAIN
#importing libraries

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
# %matplotlib inline

print('Libraries imported successfully.')

#loading dataset from online source

url='http://bit.ly/w-data' 
df = pd.read_csv(url)
print("Dataset imported successfully.")

"""Exploratory data analysis and visualization"""

#The dataset.head() is used to display the first few columns of our dataset

df.head()

df.shape

df.isnull().sum() #checking for any null values

df.corr() #Displaying the correlation cofficients

#Visualization through a scatter plot

df.plot(kind='scatter',x='Hours',y='Scores',figsize=(9,6),color='g')
plt.title("Hours_studied vs Pecentage_scored")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")

"""**It can be observed that there is a postive linear relation between the 'number of hours studied' and 'percentage scored'**

**Data preparation**
"""

X = df.iloc[:,:-1].values  #independent variable 
y = df.iloc[:,1].values  #dependent variable

"""**Splitting the data into training and test data**"""

#Our objective is to train our model according to the years and salary by using training dataset 
#We then test our model on the test set

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/4, random_state=0)

"""**Training the algorithm**"""

#Fitting linear regression model into the training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,y_train) #actually produces the linear eqn for the data
print("Training has been completed successfully")
print("cofficient :", regressor.coef_ )
print("intercepts:",regressor.intercept_ )

# we can plot the fit line over the data in simple linear regression
line = regressor.coef_*X+regressor.intercept_

df.plot(kind='scatter',x='Hours',y='Scores',figsize=(9,6),color='y')
plt.plot(X, line)
plt.title("Hours_studied vs Pecentage_scored")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage Scored")

"""**blue line shown in above graph reresents the best-fit line for this data**

**Predicting the test dataset results**
"""

y_pred = regressor.predict(X_test) 
y_pred

y_test  #y_test is the real Scores of the test set.

        #y_pred are predicted Scores.

"""**Comparing the actual and the predicted scores**"""

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

"""**Evaluating the Model / Calculating the accuracy of the Model using Mean Absolute Error**"""

#Find mean absolute error 
#Mean Absolute Error is the sum of absolute differences between our target and predicted variables
from sklearn import metrics
from sklearn.metrics import r2_score

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('r2_score :',r2_score(y_test,y_pred))

"""**Finding the predicted score if a student studies 9.25 hrs/day**"""

#Solving the problem
hours = [[9.25]]
own_pred = regressor.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))